// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortalProgramacao.Infrastructure.Data.Context;

#nullable disable

namespace PortalProgramacao.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20221216044947_InsertOriginAndCsiFildsToActivity")]
    partial class InsertOriginAndCsiFildsToActivity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.11");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Activities.Activity", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ComuteTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Csi")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("HeadCount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Hours")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MenHour")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("NplId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Origin")
                        .HasColumnType("TEXT");

                    b.Property<string>("OsNote")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PlanedDate")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("ProcessId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ProgramedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("TypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NplId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("TypeId");

                    b.ToTable("Activities", (string)null);
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Activities.Type", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Preventiva SE"
                        },
                        new
                        {
                            Id = 2ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Preventiva LT"
                        },
                        new
                        {
                            Id = 3ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Inspeção SE"
                        },
                        new
                        {
                            Id = 4ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Inspeção LT"
                        },
                        new
                        {
                            Id = 5ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Corretiva SE"
                        },
                        new
                        {
                            Id = 6ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Corretiva LT"
                        },
                        new
                        {
                            Id = 7ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Expansão SE"
                        },
                        new
                        {
                            Id = 8ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Expansão LT"
                        },
                        new
                        {
                            Id = 9ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Comissionamento SE"
                        },
                        new
                        {
                            Id = 10ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Comissionamento LT"
                        },
                        new
                        {
                            Id = 11ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Corretiva Aut"
                        },
                        new
                        {
                            Id = 12ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Preventiva Aut"
                        },
                        new
                        {
                            Id = 13ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DESC"
                        },
                        new
                        {
                            Id = 14ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apoio a UTD/UTEPs"
                        },
                        new
                        {
                            Id = 15ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Transporte"
                        });
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Employees.Employee", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<ulong>("NplId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegisterId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NplId");

                    b.HasIndex("RegisterId")
                        .IsUnique();

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Employees.MonthDayCount", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("NumberOfDays")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("MonthDayCounts", (string)null);
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Processes.EmployeeProcess", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("ProcessId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProcessId");

                    b.ToTable("EmployeeProcesses", (string)null);
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Processes.Process", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Processes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SE"
                        },
                        new
                        {
                            Id = 2ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LT"
                        },
                        new
                        {
                            Id = 3ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AUT"
                        },
                        new
                        {
                            Id = 4ul,
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "TLE"
                        });
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Regions.NPLs.Npl", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<ulong>("SectorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("SectorId");

                    b.ToTable("Npls", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1ul,
                            Code = "CAA",
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Caruaru",
                            SectorId = 2ul
                        },
                        new
                        {
                            Id = 2ul,
                            Code = "GAN",
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Garanhuns",
                            SectorId = 2ul
                        },
                        new
                        {
                            Id = 3ul,
                            Code = "PMR",
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Palmares",
                            SectorId = 2ul
                        },
                        new
                        {
                            Id = 4ul,
                            Code = "PTU",
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Petrolina",
                            SectorId = 1ul
                        },
                        new
                        {
                            Id = 5ul,
                            Code = "SRT",
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Serra Talhada",
                            SectorId = 1ul
                        },
                        new
                        {
                            Id = 6ul,
                            Code = "MTS",
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Metropolitano Sul",
                            SectorId = 3ul
                        },
                        new
                        {
                            Id = 7ul,
                            Code = "MTN",
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Metropolitano Norte",
                            SectorId = 3ul
                        },
                        new
                        {
                            Id = 8ul,
                            Code = "CPN",
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Carpina",
                            SectorId = 3ul
                        });
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Regions.Sectors.Sector", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Sectors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1ul,
                            Code = "NSIT",
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Interior"
                        },
                        new
                        {
                            Id = 2ul,
                            Code = "NSLT",
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Litoral"
                        },
                        new
                        {
                            Id = 3ul,
                            Code = "NSMT",
                            CreatedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Metropolitano"
                        });
                });

            modelBuilder.Entity("PortalProgramacao.Infrastructure.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("ApplicationRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0c3959bd-151b-4447-bc7c-714dd798707d",
                            ConcurrencyStamp = "0c3959bd-151b-4447-bc7c-714dd798707d",
                            Description = "Administrador do sistema",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "d861b504-7f2c-4d37-bb12-2c1da3c206bb",
                            ConcurrencyStamp = "d861b504-7f2c-4d37-bb12-2c1da3c206bb",
                            Description = "Usuário comum do sistema",
                            Name = "Programador",
                            NormalizedName = "PROGRAMADOR"
                        });
                });

            modelBuilder.Entity("PortalProgramacao.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFirstAccess")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("PortalProgramacao.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PortalProgramacao.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PortalProgramacao.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("PortalProgramacao.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalProgramacao.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PortalProgramacao.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Activities.Activity", b =>
                {
                    b.HasOne("PortalProgramacao.Domain.Entities.Regions.NPLs.Npl", "Npl")
                        .WithMany("Activities")
                        .HasForeignKey("NplId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalProgramacao.Domain.Entities.Processes.Process", "Process")
                        .WithMany("Activities")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalProgramacao.Domain.Entities.Activities.Type", "Type")
                        .WithMany("Activities")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Npl");

                    b.Navigation("Process");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Employees.Employee", b =>
                {
                    b.HasOne("PortalProgramacao.Domain.Entities.Regions.NPLs.Npl", "Npl")
                        .WithMany("EmployeesInNpl")
                        .HasForeignKey("NplId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Npl");
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Employees.MonthDayCount", b =>
                {
                    b.HasOne("PortalProgramacao.Domain.Entities.Employees.Employee", "Employee")
                        .WithMany("MonthDayCounts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Processes.EmployeeProcess", b =>
                {
                    b.HasOne("PortalProgramacao.Domain.Entities.Employees.Employee", "Employee")
                        .WithMany("EnabledProcesses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalProgramacao.Domain.Entities.Processes.Process", "Process")
                        .WithMany("EmployeeProcesses")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Regions.NPLs.Npl", b =>
                {
                    b.HasOne("PortalProgramacao.Domain.Entities.Regions.Sectors.Sector", "Sector")
                        .WithMany("Npls")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Activities.Type", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Employees.Employee", b =>
                {
                    b.Navigation("EnabledProcesses");

                    b.Navigation("MonthDayCounts");
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Processes.Process", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("EmployeeProcesses");
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Regions.NPLs.Npl", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("EmployeesInNpl");
                });

            modelBuilder.Entity("PortalProgramacao.Domain.Entities.Regions.Sectors.Sector", b =>
                {
                    b.Navigation("Npls");
                });
#pragma warning restore 612, 618
        }
    }
}
